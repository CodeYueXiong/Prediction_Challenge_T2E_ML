install.packages("mlr3learners.mboost")
remotes::install_github("mlr3learners/mlr3learners.mboost")
library(mlr3learners.mboost)
learner = lrn("surv.rpart")
library(mlr3)
library(mlr3learners)
learner = lrn("surv.rpart")
remotes::install_github("mlr-org/mlr3extralearners")
learner = lrn("mlr3learners.mboost")
library(mlr3learners.mboost)
learner = lrn("surv.rpart")
install.packages("mlr3extralearners")
## update R version
library(devtools)
install_github(‘andreacirilloac/updateR’)
remotes::install_github(‘andreacirilloac/updateR’)
remotes::install_github("andreacirilloac/updateR")
library(updateR)
library(updateR)
require(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
## update R version
library(devtools)
require(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR()
1
updateR()
## update R version
library(devtools)
devtools::install_github("AndreaCirilloAC/updateR")
library(updateR)
updateR(admin_password = '967270Xgy@')
library(updateR)
updateR()
install.packages(as.vector(installing))
install.packages("mlr3extralearners")
remotes::install_github("mlr-org/mlr3extralearners")
install.packages(c("devtools", "mlr3", "mlr3learners", "remotes"))
install.packages("mlr3extralearners")
remotes::install_github("mlr-org/mlr3extralearners")
library(mlr3learners.mboost)
library(mlr3)
library(mlr3extralearners)
learner = lrn("surv.rpart")
library(mlr3learners)
learner = lrn("surv.rpart")
## load mlr3 learners and extra learners
library(mlr3learners)
library(mlr3)
library(mlr3extralearners)
lrn("regr.gbm")
## install the required learner w.r.t id
install_learners("regr.gbm")
lrn("regr.gbm")
install.packages(..., repos = "https://mlr3learners.github.io/mlr3learners.drat")
install.packages(repos = "https://mlr3learners.github.io/mlr3learners.drat")
## install the required learner w.r.t id
install_learners("surv.coxboost	")
learner <- lrn("surv.coxboost")
install_learners("surv.coxboost")
install.packages("CoxBoost")
learner <- lrn("surv.coxboost")
## load mlr3 learners and extra learners, based on the updated version, we should use the mlr3extralearners package
library(mlr3learners)
library(mlr3)
library(mlr3extralearners)
learner <- lrn("surv.coxboost")
## install the required learner w.r.t id
install_learners("surv.coxboost")
install.packages("CoxBoost")
install.packages("~/Downloads/CoxBoost_1.4.tar.gz", repos = NULL, type = "source")
## install the required learner w.r.t id
install_learners("surv.coxboost")
library(CoxBoost)
install.packages("prodlim")
library(prodlim)
install.packages("~/Downloads/CoxBoost_1.4.tar.gz", repos = NULL, type = "source")
library(CoxBoost)
## install the required learner w.r.t id
install_learners("surv.coxboost")
install.packages("CoxBoost")
install.packages("CoxBoost")
library(CoxBoost)
## install the required learner w.r.t id
install_learners("surv.coxboost")
# install.packages("CoxBoost")
learner <- lrn("surv.coxboost")
learner$param_set
learner$param_set$ids()
## load the required packages for the AFT model
install.packages("mlr3proba")
install.packages("mlr3proba")
install.packages("mlr3proba")
install.packages("mlr3proba")
## load mlr3proba library
library(mlr3proba)
## install the learner with mlr3extralearner
install_learners("surv.rpart")
## load mlr3 learners and extra learners, based on the updated version, we should use the mlr3extralearners package
library(mlr3learners)
## install the learner with mlr3extralearners
install_learners("surv.rpart")
## install the required learner w.r.t id
install_learners("surv.coxboost")
## load mlr3 learners and extra learners, based on the updated version, we should use the mlr3extralearners package
library(mlr3learners)
library(mlr3)
library(mlr3extralearners)
# install.packages("prodlim")
library(prodlim)
install.packages("rpart")
install.packages("distr6")
install.packages("survival")
install.packages("survival")
## load  libraries
library(mlr3proba)
library(rpart)
library(distr6)
library(survival)
install.packages("survival")
install.packages("survival")
## load  libraries
library(mlr3proba)
library(rpart)
library(distr6)
library(survival)
## load mlr3 learners and extra learners, based on the updated version, we should use the mlr3extralearners package
library(mlr3learners)
library(mlr3)
library(mlr3extralearners)
# install.packages("prodlim")
library(prodlim)
library(CoxBoost)
## install the learner with mlr3extralearners
install_learners("surv.rpart")
learner_aft <- lrn("surv.rpart")
learner_aft$param_set$ids()
library(mlr3proba)
## get required learners for the aft model
mlr_learners$get("surv.parametric")
## get required learners for the aft model
mlr_learners$get("surv.parametric")
lrn_aft <- lrn(surv.parametric)
lrn_aft <- lrn("surv.parametric")
## tunable parameters with the aft model
lrn_aft$param_set
## load the mlr3proba library
library(mlr3extralearners)
## get required learners for the coxboost  model
mlr_learners$get("surv.coxboost")
lrn_coxboost <- lrn("surv.coxboost")
## tunable parameters with the aft model
lrn_coxboost$param_set
## load the mlr3 extralearners library
library(mlr3extralearners)
## load the mlr3 extralearners library
library(mlr3extralearners)
## get required learners for the mboost model
mlr_learners$get("surv.mboost")
install.packages("mboost")
## load the mlr3 extralearners library and the mboost library
library(mlr3extralearners)
library(mboost)
## get required learners for the mboost model
mlr_learners$get("surv.mboost")
lrn_mboost <- lrn("surv.mboost")
## tunable parameters with the mboost model
lrn_mboost$param_set
## load the mlr3proba library
library(mlr3proba)
## get required learners for the aft model
mlr_learners$get("surv.parametric")
lrn_aft <- lrn("surv.parametric")
## tunable parameters with the aft model
lrn_aft$param_set
## load the mlr3proba library and the coxboost library
library(mlr3extralearners)
library(CoxBoost)
## get required learners for the coxboost model
mlr_learners$get("surv.coxboost")
lrn_coxboost <- lrn("surv.coxboost")
## tunable parameters with the coxboost model
lrn_coxboost$param_set
## tunable parameters with the mboost model
lrn_mboost$param_set$ids
## tunable parameters with the mboost model
lrn_mboost$param_set$ids()
## tunable parameters with the coxboost model
lrn_coxboost$param_set$ids()
## tunable parameters with the aft model
lrn_aft$param_set$ids()
## tunable parameters with the aft model
lrn_aft$param_set
## tunable parameters with the mboost model
lrn_mboost$param_set$ids()
## tunable parameters with the mboost model
lrn_mboost$param_set
## tunable parameters with the coxboost model
lrn_coxboost$param_set
## load mlr3 learners and extra learners, based on the updated version, we should use the mlr3extralearners package
library(mlr3learners)
library(mlr3)
library(mlr3extralearners)
library(CoxBoost)
## load the mlr3proba library and the coxboost library
library(mlr3extralearners)
library(CoxBoost)
## get required learners for the coxboost model
mlr_learners$get("surv.coxboost")
lrn_coxboost <- lrn("surv.coxboost")
## tunable parameters with the coxboost model
lrn_coxboost$param_set
## load the mlr3 extralearners library and the mboost library
library(mlr3extralearners)
library(mboost)
## get required learners for the mboost model
mlr_learners$get("surv.mboost")
lrn_mboost <- lrn("surv.mboost")
## tunable parameters with the mboost model
lrn_mboost$param_set
print(name_stu + matriculation_num)
## Question 2. .R
name_stu <- "Yue Xiong"
matriculation_num <- 12140182
print(name_stu + matriculation_num)
## Question 2. .R
name_stu <- "Yue Xiong"
matriculation_num <- 12140182
print(“Student name is ” + name_stu)
print("Student name is" + name_stu)
print("Student name is ", name_stu)
cat("Student name is ", name_stu)
cat("Student name is", name_stu)
cat("The matriculation number is", matriculation_num)
?cat
?mboost
library(mboost)
?mboost
mboost
cleat
clear
clc
knitr::opts_chunk$set(echo = TRUE)
install.packages("pacman")
## load the pacman
require(pacman) # gives a confirmation message
library(pacman) # no message
## use pacman to install other packages
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown,
shiny, stringr, tidyr)
## for base packages
library(datasets)
## unload packages
p_unload(stringr)
## check the unload
detach("package:datasets", unload = TRUE)
## clear console
cat("\014")
library(datasets)
head(iris)
?plot
plot(iris$Species)
plot(iris$Petal.Length) ## quantitive var
plot(iris$Species, iris$Petal.Width) # cat x quant
plot(iris$Petal.Length, iris$Sepal.Width) # quant pair
plot(iris$Species, iris$Petal.Width) # cat x quant
plot(iris$Petal.Length, iris$Sepal.Width) # quant pair
plot(iris)
## plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000", # Hex code for the datalab.cc red
pch = 19,        # use solid circles for points
main = "iris$Petal.Length vs. iris$Petal.Width",
xlab = "Petal Length",
ylab = "Petal Width")
## plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000", # Hex code for the datalab.cc red
pch = 10,        # use solid circles for points
main = "iris$Petal.Length vs. iris$Petal.Width",
xlab = "Petal Length",
ylab = "Petal Width")
## plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000", # Hex code for the datalab.cc red
pch = 8,        # use solid circles for points
main = "iris$Petal.Length vs. iris$Petal.Width",
xlab = "Petal Length",
ylab = "Petal Width")
## plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#bb0000", # Hex code for the datalab.cc red
pch = 8,        # use solid circles for points
main = "iris$Petal.Length vs. iris$Petal.Width",
xlab = "Petal Length",
ylab = "Petal Width")
## plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cb0000", # Hex code for the datalab.cc red
pch = 8,        # use solid circles for points
main = "iris$Petal.Length vs. iris$Petal.Width",
xlab = "Petal Length",
ylab = "Petal Width")
## feed in formulas
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(norm, 0, 1)
plot(dnorm, -3, +3)
head(mtcars)
barplot(mtcars)
barplot(mtcars$mpg)
barplot(mtcars$mpg, mtcars$cyl)
barplot(mtcars$cyl)
barplot(mtcars$cyl)
## need to reformate the data
# create a table
cylinder <- table(mtcars$cyl)
## need to reformate the data
# create a table
cylinders <- table(mtcars$cyl)
barplot(cylinders)
# clear envir
rm(list = ls())
library(datasets)
head(iris)
# basic histograms
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# do hist by groups
par(mfrow = c(3, 1)) # put graphs in 3 rows and 1 cols
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal width for versicolor",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal width for versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal width for virginica",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal width for virginica",
xlab = "",
col = "blue")
# restore graphic parameter
par(mfrow = c(1, 1))
# clean up
rm(list = ls())
library(datasets)
head(mtcars)
## first check the uni-var distributions
hist(mtcats$wt)
## first check the uni-var distributions
hist(mtcars$wt)
hist(mtcars$mpg)
## X-Y plot
plot(mtcars$wt, mtcars$mpg)
## X-Y plot
plot(mtcars$wt, mtcars$mpg,
pch = 8,
cex = 1,5,
col = "red",
main = "MPG as a function of weight of cars",
xlab = "Weight (in 1,000 pounds)",
ylab = "MPG")
## X-Y plot
plot(mtcars$wt, mtcars$mpg,
pch = 8,
cex = 1.5,
col = "red",
main = "MPG as a function of weight of cars",
xlab = "Weight (in 1,000 pounds)",
ylab = "MPG")
# detach
detach("package:datasets", unload = TRUE)
library(datasets)
head(lynx)
# default hist
hist(lynx)
# add some options
hist(lynx,
breaks = 14,
freq = FALSE,
col = "thistle1",
main = paste("Hist of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab = "Number of Lynx Trapped")
# add a normal dist
# add a normal dist
curve(dnorm(x, mean = mean(lynx),sd = sd(lunx)),
col = "thistle4",
lwd = 2, # line width of 2 pixels
add = TRUE # superimpose over the previous graph
)
# add a normal dist
curve(dnorm(x, mean = mean(lynx),sd = sd(lunx)),
col = "thistle4",
lwd = 2, # line width of 2 pixels
# superimpose over the previous graph
add = TRUE)
# add a normal dist
curve(dnorm(x, mean = mean(lynx),sd = sd(lynx)),
col = "thistle4",
lwd = 2, # line width of 2 pixels
# superimpose over the previous graph
add = TRUE)
# add a normal dist
curve(dnorm(x, mean = mean(lynx),sd = sd(lynx)),
col = "thistle4",
lwd = 2, # line width of 2 pixels
# superimpose over the previous graph
add = TRUE)
# add some options
hist(lynx,
breaks = 14, # suggest 14 bins
freq = FALSE,
col = "thistle1",
main = paste("Hist of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab = "Number of Lynx Trapped")
# Add some options
hist(lynx,
breaks = 14,          # "Suggests" 14 bins
freq   = FALSE,       # Axis shows density, not freq.
col    = "thistle1",  # Color for histogram
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Add a normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# add two kernels density estimators
lines(density(lynx), col = "blue", lwd = 2)
# load data
library(datasets)
head(lynx) # time series
# default hist
hist(lynx) # get a skewed distribution
# default hist
hist(lynx) # get a skewed distribution
# Add some options
hist(lynx,
breaks = 14,          # "Suggests" 14 bins
freq   = FALSE,       # Axis shows density, not freq.
col    = "thistle1",  # Color for histogram
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Add a normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# add two kernels density estimators
lines(density(lynx), col = "blue", lwd = 2)
lines(density(lynx, adjust = 3), col = "purple", lwd = 2)
# add a rug plot, more vertical
rug(lynx, lwd = 2, col = "gray")
detach("package:datasets", unload = TRUE)
library(datasets)
# load data
head(iris)
# summary()
summary(iris$Species)
summary(iris$Sepal.Length)
summary(iris)
# use pacman to load add-on packages as desired
pacman::p_load(pacman, psych)
# load data iris
install.packages("languageserver")
d <- matirx(nrow = 5, ncol = 5)
d <- matrix(nrow = 5, ncol = 5)
for (a in 1:5){
for(b in 1:5){
if(a>=4 & b>=4){
d[a,b]=1
}
else{
d[1,1]= 0
}
}
}
d
d <- matrix(nrow = 5, ncol = 5)
for (a in 1:5){
for(b in 1:5){
if(a>=4 & b>=4){
d[a,b]=1
}
else{
d[a,b]= 0
}
}
}
d
